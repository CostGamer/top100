e-Comet.io: Тестовое задание для Backend Developer (Python+SQL) v1.5
14 ноября 2024
Задание состоит из двух частей - это микро веб-приложение с парсером на бэкенде:
API-приложение в docker на FastAPI 
RESTful API приложение должно быть обернуто в docker compose.
GET /api/repos/top100
Отображение топ 100 публичных репозиториев из PostgresSQL (результат работы парсера данных из пункта 2). Топ составляется по количеству звезд (stars). Плюсом будет реализация сортировки по полям в виде параметров запроса. 
Схема (список объектов), название таблицы top100:
repo: string – название репозитория (full_name в API GitHub)
owner: string - владелец репозитория
position_cur: integer – текущая позиция в топе
position_prev: integer – предыдущая позиция в топе
stars: integer – количество звёзд
watchers: integers – количество просмотров
forks: integer – количество форков
open_issues: integer – количество открытых issues
language: string - язык
GET /api/repos/{owner}/{repo}/activity
Информация об активности репозитория по коммитам за выбранный промежуток времени по дням. Параметры запроса since и until для выбора промежутка дат.
Схема (список объектов), название таблицы activity:
date: date
commits: int – количество коммитов за конкретный день
authors: list[string] – список разработчиков, которые выполняли коммиты
Парсер на данных с GitHub
Периодический (интервал выбери сам с обоснованием) парсинг данных в PostgreSQL. Схемы таблиц в PostgreSQL должны соответствовать схемам эндпойнтов приложения из пункта 1. Реализация должна быть на базе тривиальной клауд функции Яндекс.Облака (можно развернуть и протестировать на бесплатной версии Яндекс.Облака). По возможности все действия, необходимые для создания клауд функции и триггера, должны совершаться простым скриптом для Yandex Cloud CLI / terraform. Параметры подключения к PostgreSQL задаются в переменных окружения клауд функции. Создавать скриптами схемы БД не нужно - мы будем использовать наш кластер Postgres c готовой схемой.
Другие требования
Решение должно быть выложено на GitHub
Запросы к БД должны быть написаны на чистом SQL без использования ORM, c пулом подключений
Содержать краткую инструкцию по запуску
Python 3.11+, PEP8
Код должен быть безопасным, с обработчиками ошибок
Архитектура важна! Должны использоваться современные возможности FastAPI, повышающие переиспользуемость кода (например, Dependency Injection)
Пожалуйста, внимательно прочитай ТЗ выше - важно следовать всем требованиям. Обязательно удели внимание структуре и качеству кода - иначе ты просто потратишь и наше и свое время, ведь это задание не на скорость. Используй по максимуму фичи фреймворка FastAPI. Удели внимание эффективности работы с БД. И не забывай про комментарии к ключевым моментам. Удачи! :)
